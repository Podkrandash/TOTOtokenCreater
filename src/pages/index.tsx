import React from 'react';
import styled from 'styled-components';
import { Layout } from '@/components/Layout';
import { Button } from '@/components/Button';
import { Card } from '@/components/Card';
import { useRouter } from 'next/router';
import { useTonConnectUI } from '@tonconnect/ui-react';

const Hero = styled.div`
  text-align: center;
  margin-bottom: ${({ theme }) => theme.space.xl};
  
  @media (max-width: 480px) {
    margin-bottom: ${({ theme }) => theme.space.lg};
  }
`;

const HeroTitle = styled.h1`
  font-size: min(48px, 10vw); // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
  margin-bottom: ${({ theme }) => theme.space.md};
  line-height: 1.2;
  
  span {
    color: ${({ theme }) => theme.colors.primary};
  }
  
  @media (max-width: 480px) {
    font-size: min(32px, 8vw);
    margin-bottom: ${({ theme }) => theme.space.sm};
  }
`;

const HeroSubtitle = styled.p`
  font-size: 18px;
  color: ${({ theme }) => theme.colors.textSecondary};
  max-width: 700px;
  margin: 0 auto ${({ theme }) => theme.space.lg};
  line-height: 1.5;
  
  @media (max-width: 480px) {
    font-size: 16px;
    margin-bottom: ${({ theme }) => theme.space.md};
  }
`;

const Features = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  gap: ${({ theme }) => theme.space.md};
  margin-bottom: ${({ theme }) => theme.space.xl};
  
  @media (max-width: 480px) {
    grid-template-columns: 1fr;
    gap: ${({ theme }) => theme.space.sm};
    margin-bottom: ${({ theme }) => theme.space.lg};
  }
`;

const FeatureCard = styled(Card)`
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
  padding: ${({ theme }) => theme.space.lg};
  
  @media (max-width: 480px) {
    padding: ${({ theme }) => theme.space.md};
  }
`;

const FeatureIcon = styled.div`
  width: 60px;
  height: 60px;
  border-radius: 50%;
  background-color: rgba(0, 136, 204, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: ${({ theme }) => theme.space.md};
  font-size: 24px;
  color: ${({ theme }) => theme.colors.primary};
  
  @media (max-width: 480px) {
    width: 48px;
    height: 48px;
    font-size: 20px;
    margin-bottom: ${({ theme }) => theme.space.sm};
  }
`;

const FeatureTitle = styled.h3`
  margin-bottom: ${({ theme }) => theme.space.sm};
  font-size: 20px;
  
  @media (max-width: 480px) {
    font-size: 18px;
  }
`;

const FeatureText = styled.p`
  color: ${({ theme }) => theme.colors.textSecondary};
  line-height: 1.5;
  font-size: 16px;
  
  @media (max-width: 480px) {
    font-size: 14px;
  }
`;

const CTA = styled.div`
  text-align: center;
  margin-top: ${({ theme }) => theme.space.xl};
  
  @media (max-width: 480px) {
    margin-top: ${({ theme }) => theme.space.lg};
  }
`;

const ButtonGroup = styled.div`
  display: flex;
  gap: ${({ theme }) => theme.space.md};
  justify-content: center;
  margin-top: ${({ theme }) => theme.space.lg};
  
  @media (max-width: 600px) {
    flex-direction: column;
    align-items: center;
    gap: ${({ theme }) => theme.space.sm};
    margin-top: ${({ theme }) => theme.space.md};
  }
`;

export default function Home() {
  const router = useRouter();
  const [tonConnectUI] = useTonConnectUI();
  
  const features = [
    {
      icon: 'üöÄ',
      title: '–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ',
      text: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã Jetton –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.'
    },
    {
      icon: 'üîí',
      title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
      text: '–í—Å–µ —Ç–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ TON. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –∫–ª—é—á–∏ –∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.'
    },
    {
      icon: '‚öôÔ∏è',
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      text: '–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –≤—ã–ø—É—Å–∫, —Å–∂–∏–≥–∞–Ω–∏–µ, –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.'
    },
  ];
  
  const handleConnect = async () => {
    if (tonConnectUI) {
      await tonConnectUI.connectWallet();
    }
  };
  
  const isWalletConnected = tonConnectUI && tonConnectUI.wallet;
  
  return (
    <Layout>
      <Hero>
        <HeroTitle>
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ <span>Jetton —Ç–æ–∫–µ–Ω—ã</span> –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON
        </HeroTitle>
        <HeroSubtitle>
          TOTO Trade - –ø—Ä–æ—Å—Ç–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Jetton —Ç–æ–∫–µ–Ω–∞–º–∏ –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ TON.
          –ù–∏–∫–∞–∫–æ–≥–æ –∫–æ–¥–∞, —Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤.
        </HeroSubtitle>
        <ButtonGroup>
          {isWalletConnected ? (
            <Button size="large" onClick={() => router.push('/create')}>
              –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
            </Button>
          ) : (
            <Button size="large" onClick={handleConnect}>
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
            </Button>
          )}
          <Button size="large" variant="outline" onClick={() => router.push('/manage')}>
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
          </Button>
        </ButtonGroup>
      </Hero>
      
      <Features>
        {features.map((feature, index) => (
          <FeatureCard key={index}>
            <FeatureIcon>{feature.icon}</FeatureIcon>
            <FeatureTitle>{feature.title}</FeatureTitle>
            <FeatureText>{feature.text}</FeatureText>
          </FeatureCard>
        ))}
      </Features>
      
      <CTA>
        <HeroTitle>
          –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?
        </HeroTitle>
        <HeroSubtitle>
          –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π TON –∫–æ—à–µ–ª–µ–∫ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
        </HeroSubtitle>
        <Button size="large" onClick={isWalletConnected ? () => router.push('/create') : handleConnect}>
          {isWalletConnected ? '–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'}
        </Button>
      </CTA>
    </Layout>
  );
} 